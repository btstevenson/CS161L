----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    18:46:11 02/02/2016 
-- Design Name: 
-- Module Name:    Binary_to_BCD - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Binary_to_BCD is
    Port ( Signal_B : in  STD_LOGIC_VECTOR(35 downto 0);
           result : out  STD_LOGIC_VECTOR(35 downto 0));
end Binary_to_BCD;

architecture Behavioral of Binary_to_BCD is

begin

			process(Signal_B)
				--	Variable temp : STD_LOGIC_VECTOR(67 downto 0);
				variable i : integer:=0;
				variable bcd : std_logic_vector(35 downto 0) := (others => '0');
				variable bint : std_logic_vector(35 downto 0) := Signal_B;
			begin
				--	if Signal_B(3 downto 0) > "

					for i in 0 to 35 loop  -- repeating 35 times.
						bcd(35 downto 1) := bcd(34 downto 0);  --shifting the bits.
						bcd(0) := bint(35);

						bint(35 downto 1) := bint(34 downto 0);
						bint(0) :='0';

						if(i < 35 and bcd(3 downto 0) > "0100") then --add 3 if BCD digit is greater than 4.
						bcd(3 downto 0) := bcd(3 downto 0) + "0011";
						end if;
		
						if(i < 35 and bcd(7 downto 4) > "0100") then --add 3 if BCD digit is greater than 4.
						bcd(7 downto 4) := bcd(7 downto 4) + "0011";
						end if;
		
						if(i < 35 and bcd(11 downto 8) > "0100") then  --add 3 if BCD digit is greater than 4.
						bcd(11 downto 8) := bcd(11 downto 8) + "0011";
						end if;
						
						if(i < 35 and bcd(15 downto 12) > "0100") then  --add 3 if BCD digit is greater than 4.
						bcd(15 downto 12) := bcd(15 downto 12) + "0011";
						end if;
									
						if(i < 35 and bcd(19 downto 16) > "0100") then  --add 3 if BCD digit is greater than 4.
						bcd(19 downto 16) := bcd(19 downto 16) + "0011";
						end if;
						
						if(i < 35 and bcd(23 downto 20) > "0100") then  --add 3 if BCD digit is greater than 4.
						bcd(23 downto 20) := bcd(23 downto 20) + "0011";
						end if;						
						
						if(i < 35 and bcd(27 downto 24) > "0100") then  --add 3 if BCD digit is greater than 4.
						bcd(27 downto 24) := bcd(27 downto 24) + "0011";
						end if;
						
						if(i < 35 and bcd(31 downto 28) > "0100") then  --add 3 if BCD digit is greater than 4.
						bcd(31 downto 28) := bcd(31 downto 28) + "0011";
						end if;
						
						if(i < 35 and bcd(35 downto 31) > "0100") then  --add 3 if BCD digit is greater than 4.
						bcd(35 downto 31) := bcd(35 downto 31) + "0011";						
						end if;						

					end loop;
					result <= bcd;
			end process;

end Behavioral;
